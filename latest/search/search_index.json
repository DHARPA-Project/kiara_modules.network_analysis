{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules for: network-analysis \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 TODO Package content \u00b6 Core modules \u00b6 network_graph.add_centrality_calculations : Add centrality properties to a graph. network_graph.add_nodes : Add nodes to an existing graph. network_graph.augment : Augment an existing graph with node attributes. network_graph.components : Extract component information from a graph. network_graph.find_shortest_path : Find the shortest path between two nodes in a network graph. network_graph.from_edges_table : Create a directed network graph object from table data. network_graph.from_file : Create a graph object from a file. network_graph.metadata : Extract metadata from a network graph object. network_graph.properties : Extract inherent properties of a network graph. network_graph.save : Save a network graph object. Pipelines \u00b6 network_graph.analyze : First iteration of a network analysis pipeline. This doesn't do much yet. network_graph.import.from_local_files : Create a network graph from a a csv file that contains edges. You can specify an additional csv file if you have node attributes. network_graph.load : Load a network graph object. Value types \u00b6 network_graph : A network graph object. Metadata schemas \u00b6 network.graph : -- n/a -- Links \u00b6 Documentation: https://dharpa.org/kiara_modules.network_analysis Code: https://github.com/DHARPA-Project/kiara_modules.network_analysis","title":"Home"},{"location":"#kiara-modules-for-network-analysis","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara modules for: network-analysis"},{"location":"#description","text":"TODO","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#core-modules","text":"network_graph.add_centrality_calculations : Add centrality properties to a graph. network_graph.add_nodes : Add nodes to an existing graph. network_graph.augment : Augment an existing graph with node attributes. network_graph.components : Extract component information from a graph. network_graph.find_shortest_path : Find the shortest path between two nodes in a network graph. network_graph.from_edges_table : Create a directed network graph object from table data. network_graph.from_file : Create a graph object from a file. network_graph.metadata : Extract metadata from a network graph object. network_graph.properties : Extract inherent properties of a network graph. network_graph.save : Save a network graph object.","title":"Core modules"},{"location":"#pipelines","text":"network_graph.analyze : First iteration of a network analysis pipeline. This doesn't do much yet. network_graph.import.from_local_files : Create a network graph from a a csv file that contains edges. You can specify an additional csv file if you have node attributes. network_graph.load : Load a network graph object.","title":"Pipelines"},{"location":"#value-types","text":"network_graph : A network graph object.","title":"Value types"},{"location":"#metadata-schemas","text":"network.graph : -- n/a --","title":"Metadata schemas"},{"location":"#links","text":"Documentation: https://dharpa.org/kiara_modules.network_analysis Code: https://github.com/DHARPA-Project/kiara_modules.network_analysis","title":"Links"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. network_graph.add_centrality_calculations \u00b6 Documentation Add centrality properties to a graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Roman Kalyakin (roman@kalyakin.com) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AddCentralityCalculationsModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 graph: Graph = inputs.get_value_data(\"graph\") graph = copy.deepcopy(graph) # degree degree_dict = graph.degree() nx.set_node_attributes( graph, dict(degree_dict), inputs.get_value\u2026 ) # isolated isolated_flag_dict = {id: True for id in nx.is\u2026 nx.set_node_attributes( graph, isolated_flag_dict, inputs.get_valu\u2026 ) if nx.is_directed(graph): graph = typing.cast(nx.DiGraph, graph) # indegree indegree_dict = graph.in_degree() nx.set_node_attributes( graph, dict(indegree_dict), inputs.get_value_data(\"indegree_proper\u2026 ) # outdegree outdegree_dict = graph.out_degree() nx.set_node_attributes( graph, dict(outdegree_dict), inputs.get_value_data(\"outdegree_prope\u2026 ) # eigenvector # betweenness betweenness_dict = nx.betweenness_centrality(g\u2026 eigenvector_dict = nx.eigenvector_centrality(g\u2026 nx.set_node_attributes( graph, betweenness_dict, inputs.get_value_\u2026 ) nx.set_node_attributes( graph, eigenvector_dict, inputs.get_value_\u2026 ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.add_nodes \u00b6 Documentation Add nodes to an existing graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AddNodesToNetworkGraphModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa nodes_table_value = inputs.get_value_obj(\"node\u2026 if nodes_table_value.is_none: # we return the graph as is # we are using the 'get_value_obj' method,\u2026 # actual data at all outputs.set_value(\"graph\", inputs.get_valu\u2026 return input_graph: Graph = inputs.get_value_data(\"gr\u2026 graph: Graph = copy.deepcopy(input_graph) nodes_table_obj: pa.Table = nodes_table_value.\u2026 nodes_table_index = inputs.get_value_data(\"ind\u2026 attr_dict = ( nodes_table_obj.to_pandas() .set_index(nodes_table_index) .to_dict(\"index\") .items() ) graph.add_nodes_from(attr_dict) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.augment \u00b6 Documentation Augment an existing graph with node attributes. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AugmentNetworkGraphModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa nodes_table_value = inputs.get_value_obj(\"node\u2026 if not nodes_table_value or nodes_table_value.\u2026 # we return the graph as is # we are using the 'get_value_obj' method,\u2026 # actual data at all outputs.set_value(\"graph\", inputs.get_valu\u2026 return input_graph: Graph = inputs.get_value_data(\"gr\u2026 graph: Graph = copy.deepcopy(input_graph) nodes_table_obj: pa.Table = nodes_table_value.\u2026 nodes_table_index = inputs.get_value_data(\"ind\u2026 if nodes_table_index not in nodes_table_obj.co\u2026 raise KiaraProcessingException( f\"Node attribute table does not have a\u2026 ) attr_dict = ( nodes_table_obj.to_pandas() .set_index(nodes_table_index) .to_dict(\"index\") .items() ) graph.add_nodes_from(attr_dict) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.components \u00b6 Documentation Extract component information from a graph. In particular, this module can calculate the number of components of a graph, and extract the largest sub-component from it. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. find_largest_\u2026 boolean Find the no largest component of a graph. number_of_com\u2026 boolean Count the no number of components. Module config -- no config -- Python class class_name GrpahComponentsModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 # TODO: check whether we need to deepcopy the \u2026 input_graph: Graph = inputs.get_value_data(\"gr\u2026 if self.get_config_value(\"find_largest_compone\u2026 undir_graph = nx.to_undirected(input_graph) undir_components = nx.connected_components\u2026 lg_component = max(undir_components, key=l\u2026 subgraph = input_graph.subgraph(lg_compone\u2026 outputs.set_values(largest_component=subgr\u2026 if self.get_config_value(\"number_of_components\u2026 undir_graph = nx.to_undirected(input_graph) number_of_components = nx.number_connected\u2026 outputs.set_values(number_of_components=nu\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.find_shortest_path \u00b6 Documentation Find the shortest path between two nodes in a network graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. mode string Whether to no calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many'). Module config -- no config -- Python class class_name FindShortestPathModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 mode = self.get_config_value(\"mode\") if mode != \"single-pair\": raise NotImplementedError() graph: Graph = inputs.get_value_data(\"graph\") source: typing.Any = inputs.get_value_data(\"so\u2026 target: typing.Any = inputs.get_value_data(\"ta\u2026 if source not in graph.nodes: raise KiaraProcessingException( f\"Can't process shortest path, source \u2026 ) if target not in graph.nodes: raise KiaraProcessingException( f\"Can't process shortest path, target \u2026 ) shortest_path = nx.shortest_path(graph, source\u2026 outputs.set_value(\"path\", shortest_path) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.from_edges_table \u00b6 Documentation Create a directed network graph object from table data. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. graph_type string The type of the no graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'. Module config -- no config -- Python class class_name CreateGraphFromEdgesTableModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa if self.get_config_value(\"graph_type\") is not \u2026 _graph_type = self.get_config_value(\"graph\u2026 else: _graph_type = inputs.get_value_data(\"graph\u2026 graph_type = GraphTypesEnum[_graph_type] edges_table_value = inputs.get_value_obj(\"edge\u2026 edges_table_obj: pa.Table = edges_table_value.\u2026 source_column = inputs.get_value_data(\"source_\u2026 target_column = inputs.get_value_data(\"target_\u2026 weight_column = inputs.get_value_data(\"weight_\u2026 errors = [] if source_column not in edges_table_obj.column\u2026 errors.append(source_column) if target_column not in edges_table_obj.column\u2026 errors.append(target_column) if weight_column not in edges_table_obj.column\u2026 errors.append(weight_column) if errors: raise KiaraProcessingException( f\"Can't create network graph, source t\u2026 ) min_table = edges_table_obj.select( (source_column, target_column, weight_colu\u2026 ) pandas_table = min_table.to_pandas() if graph_type != GraphTypesEnum.directed: raise NotImplementedError(\"Only 'directed'\u2026 graph_cls = nx.DiGraph graph: nx.DiGraph = nx.from_pandas_edgelist( pandas_table, source_column, target_column, edge_attr=True, create_using=graph_cls, ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.from_file \u00b6 Documentation Create a graph object from a file. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CreateGraphFromFileModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_file_type = inputs.get_value_data(\"input\u2026 input_file: KiaraFile = inputs.get_value_data(\u2026 if input_file_type == \"auto\": if input_file.orig_filename.endswith(\".gra\u2026 input_file_type = \"graphml\" else: input_file_type = \"graphml\" # raise NotImplementedError() if input_file_type == \"graphml\": graph = nx.read_graphml(input_file.path) else: raise KiaraProcessingException( f\"Invalid input type '{input_file_type\u2026 ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.metadata \u00b6 Documentation Extract metadata from a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name GraphMetadataModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"value_item\") if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict() # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.properties \u00b6 Documentation Extract inherent properties of a network graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. number_of_no\u2026 boolean Count the no number of nodes. number_of_ed\u2026 boolean Count the no number of edges density boolean Calculate the no graph density. degrees boolean Calculate the no graph degrees metrics. shortest_path boolean Calculate the no graph shortest path. Module config -- no config -- Python class class_name ExtractGraphPropertiesModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 graph: Graph = inputs.get_value_data(\"graph\") if self.get_config_value(\"number_of_nodes\"): outputs.set_values(number_of_nodes=len(gra\u2026 if self.get_config_value(\"number_of_edges\"): outputs.set_values(number_of_edges=len(gra\u2026 if self.get_config_value(\"density\"): density = nx.density(graph) outputs.set_values(density=density) # TODO: rename config value to 'average_degree\u2026 if self.get_config_value(\"degrees\"): nodes_count: int = graph.number_of_nodes() if nx.is_directed(graph): if nodes_count > 0: digraph = typing.cast(nx.DiGraph, \u2026 outputs.set_values( average_in_degree=sum(d for _,\u2026 / float(nodes_count), average_out_degree=sum(d for _\u2026 / float(nodes_count), ) else: outputs.set_values(average_in_degr\u2026 else: if nodes_count: outputs.set_values( average_degree=sum(d for _, d \u2026 / float(nodes_count) ) else: outputs.set_values(average_degree=\u2026 if self.get_config_value(\"shortest_path\"): # TODO: double check why the 'if' was deem\u2026 # TODO: rename config option to 'average_s\u2026 if nx.is_weakly_connected(graph): outputs.set_values( average_shortest_path_length=nx.av\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.save \u00b6 Documentation Save a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name SaveGraphDataTypeModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 value_obj: Value = inputs.get_value_obj(\"value\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 load_config = self.save_value(value=value_obj,\u2026 load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values(load_config=lc) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list/#network_graphadd_centrality_calculations","text":"Documentation Add centrality properties to a graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Roman Kalyakin (roman@kalyakin.com) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AddCentralityCalculationsModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 graph: Graph = inputs.get_value_data(\"graph\") graph = copy.deepcopy(graph) # degree degree_dict = graph.degree() nx.set_node_attributes( graph, dict(degree_dict), inputs.get_value\u2026 ) # isolated isolated_flag_dict = {id: True for id in nx.is\u2026 nx.set_node_attributes( graph, isolated_flag_dict, inputs.get_valu\u2026 ) if nx.is_directed(graph): graph = typing.cast(nx.DiGraph, graph) # indegree indegree_dict = graph.in_degree() nx.set_node_attributes( graph, dict(indegree_dict), inputs.get_value_data(\"indegree_proper\u2026 ) # outdegree outdegree_dict = graph.out_degree() nx.set_node_attributes( graph, dict(outdegree_dict), inputs.get_value_data(\"outdegree_prope\u2026 ) # eigenvector # betweenness betweenness_dict = nx.betweenness_centrality(g\u2026 eigenvector_dict = nx.eigenvector_centrality(g\u2026 nx.set_node_attributes( graph, betweenness_dict, inputs.get_value_\u2026 ) nx.set_node_attributes( graph, eigenvector_dict, inputs.get_value_\u2026 ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.add_centrality_calculations"},{"location":"modules_list/#network_graphadd_nodes","text":"Documentation Add nodes to an existing graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AddNodesToNetworkGraphModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa nodes_table_value = inputs.get_value_obj(\"node\u2026 if nodes_table_value.is_none: # we return the graph as is # we are using the 'get_value_obj' method,\u2026 # actual data at all outputs.set_value(\"graph\", inputs.get_valu\u2026 return input_graph: Graph = inputs.get_value_data(\"gr\u2026 graph: Graph = copy.deepcopy(input_graph) nodes_table_obj: pa.Table = nodes_table_value.\u2026 nodes_table_index = inputs.get_value_data(\"ind\u2026 attr_dict = ( nodes_table_obj.to_pandas() .set_index(nodes_table_index) .to_dict(\"index\") .items() ) graph.add_nodes_from(attr_dict) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.add_nodes"},{"location":"modules_list/#network_graphaugment","text":"Documentation Augment an existing graph with node attributes. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name AugmentNetworkGraphModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa nodes_table_value = inputs.get_value_obj(\"node\u2026 if not nodes_table_value or nodes_table_value.\u2026 # we return the graph as is # we are using the 'get_value_obj' method,\u2026 # actual data at all outputs.set_value(\"graph\", inputs.get_valu\u2026 return input_graph: Graph = inputs.get_value_data(\"gr\u2026 graph: Graph = copy.deepcopy(input_graph) nodes_table_obj: pa.Table = nodes_table_value.\u2026 nodes_table_index = inputs.get_value_data(\"ind\u2026 if nodes_table_index not in nodes_table_obj.co\u2026 raise KiaraProcessingException( f\"Node attribute table does not have a\u2026 ) attr_dict = ( nodes_table_obj.to_pandas() .set_index(nodes_table_index) .to_dict(\"index\") .items() ) graph.add_nodes_from(attr_dict) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.augment"},{"location":"modules_list/#network_graphcomponents","text":"Documentation Extract component information from a graph. In particular, this module can calculate the number of components of a graph, and extract the largest sub-component from it. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. find_largest_\u2026 boolean Find the no largest component of a graph. number_of_com\u2026 boolean Count the no number of components. Module config -- no config -- Python class class_name GrpahComponentsModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 # TODO: check whether we need to deepcopy the \u2026 input_graph: Graph = inputs.get_value_data(\"gr\u2026 if self.get_config_value(\"find_largest_compone\u2026 undir_graph = nx.to_undirected(input_graph) undir_components = nx.connected_components\u2026 lg_component = max(undir_components, key=l\u2026 subgraph = input_graph.subgraph(lg_compone\u2026 outputs.set_values(largest_component=subgr\u2026 if self.get_config_value(\"number_of_components\u2026 undir_graph = nx.to_undirected(input_graph) number_of_components = nx.number_connected\u2026 outputs.set_values(number_of_components=nu\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.components"},{"location":"modules_list/#network_graphfind_shortest_path","text":"Documentation Find the shortest path between two nodes in a network graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. mode string Whether to no calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many'). Module config -- no config -- Python class class_name FindShortestPathModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 mode = self.get_config_value(\"mode\") if mode != \"single-pair\": raise NotImplementedError() graph: Graph = inputs.get_value_data(\"graph\") source: typing.Any = inputs.get_value_data(\"so\u2026 target: typing.Any = inputs.get_value_data(\"ta\u2026 if source not in graph.nodes: raise KiaraProcessingException( f\"Can't process shortest path, source \u2026 ) if target not in graph.nodes: raise KiaraProcessingException( f\"Can't process shortest path, target \u2026 ) shortest_path = nx.shortest_path(graph, source\u2026 outputs.set_value(\"path\", shortest_path) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.find_shortest_path"},{"location":"modules_list/#network_graphfrom_edges_table","text":"Documentation Create a directed network graph object from table data. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. graph_type string The type of the no graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'. Module config -- no config -- Python class class_name CreateGraphFromEdgesTableModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 import pyarrow as pa if self.get_config_value(\"graph_type\") is not \u2026 _graph_type = self.get_config_value(\"graph\u2026 else: _graph_type = inputs.get_value_data(\"graph\u2026 graph_type = GraphTypesEnum[_graph_type] edges_table_value = inputs.get_value_obj(\"edge\u2026 edges_table_obj: pa.Table = edges_table_value.\u2026 source_column = inputs.get_value_data(\"source_\u2026 target_column = inputs.get_value_data(\"target_\u2026 weight_column = inputs.get_value_data(\"weight_\u2026 errors = [] if source_column not in edges_table_obj.column\u2026 errors.append(source_column) if target_column not in edges_table_obj.column\u2026 errors.append(target_column) if weight_column not in edges_table_obj.column\u2026 errors.append(weight_column) if errors: raise KiaraProcessingException( f\"Can't create network graph, source t\u2026 ) min_table = edges_table_obj.select( (source_column, target_column, weight_colu\u2026 ) pandas_table = min_table.to_pandas() if graph_type != GraphTypesEnum.directed: raise NotImplementedError(\"Only 'directed'\u2026 graph_cls = nx.DiGraph graph: nx.DiGraph = nx.from_pandas_edgelist( pandas_table, source_column, target_column, edge_attr=True, create_using=graph_cls, ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.from_edges_table"},{"location":"modules_list/#network_graphfrom_file","text":"Documentation Create a graph object from a file. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants for no this module. defaults object Value defaults for no this module. Module config -- no config -- Python class class_name CreateGraphFromFileModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 input_file_type = inputs.get_value_data(\"input\u2026 input_file: KiaraFile = inputs.get_value_data(\u2026 if input_file_type == \"auto\": if input_file.orig_filename.endswith(\".gra\u2026 input_file_type = \"graphml\" else: input_file_type = \"graphml\" # raise NotImplementedError() if input_file_type == \"graphml\": graph = nx.read_graphml(input_file.path) else: raise KiaraProcessingException( f\"Invalid input type '{input_file_type\u2026 ) outputs.set_value(\"graph\", graph) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.from_file"},{"location":"modules_list/#network_graphmetadata","text":"Documentation Extract metadata from a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The data type this yes module will be used for. Module config -- no config -- Python class class_name GraphMetadataModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value = inputs.get_value_obj(\"value_item\") if self.value_type != \"any\" and value.type_nam\u2026 raise KiaraProcessingException( f\"Can't extract metadata for value of \u2026 ) # TODO: if type 'any', validate that the data \u2026 outputs.set_value(\"metadata_item_schema\", self\u2026 metadata = self.extract_metadata(value) if isinstance(metadata, BaseModel): metadata = metadata.dict() # TODO: validate metadata? outputs.set_value(\"metadata_item\", metadata) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.metadata"},{"location":"modules_list/#network_graphproperties","text":"Documentation Extract inherent properties of a network graph. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value defaults no for this module. number_of_no\u2026 boolean Count the no number of nodes. number_of_ed\u2026 boolean Count the no number of edges density boolean Calculate the no graph density. degrees boolean Calculate the no graph degrees metrics. shortest_path boolean Calculate the no graph shortest path. Module config -- no config -- Python class class_name ExtractGraphPropertiesModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 graph: Graph = inputs.get_value_data(\"graph\") if self.get_config_value(\"number_of_nodes\"): outputs.set_values(number_of_nodes=len(gra\u2026 if self.get_config_value(\"number_of_edges\"): outputs.set_values(number_of_edges=len(gra\u2026 if self.get_config_value(\"density\"): density = nx.density(graph) outputs.set_values(density=density) # TODO: rename config value to 'average_degree\u2026 if self.get_config_value(\"degrees\"): nodes_count: int = graph.number_of_nodes() if nx.is_directed(graph): if nodes_count > 0: digraph = typing.cast(nx.DiGraph, \u2026 outputs.set_values( average_in_degree=sum(d for _,\u2026 / float(nodes_count), average_out_degree=sum(d for _\u2026 / float(nodes_count), ) else: outputs.set_values(average_in_degr\u2026 else: if nodes_count: outputs.set_values( average_degree=sum(d for _, d \u2026 / float(nodes_count) ) else: outputs.set_values(average_degree=\u2026 if self.get_config_value(\"shortest_path\"): # TODO: double check why the 'if' was deem\u2026 # TODO: rename config option to 'average_s\u2026 if nx.is_weakly_connected(graph): outputs.set_values( average_shortest_path_length=nx.av\u2026 ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.properties"},{"location":"modules_list/#network_graphsave","text":"Documentation Save a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis Labels package: kiara_modules.network_analysis References source_repo: https://github.com/DHARPA-Project/kia\u2026 documentation: https://dharpa.org/kiara_modules.netw\u2026 module_doc: https://dharpa.org/kiara_modules.netw\u2026 source_url: https://github.com/DHARPA-Project/kia\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value constants no for this module. defaults object Value defaults for no this module. value_type string The type of the yes value to save. Module config -- no config -- Python class class_name SaveGraphDataTypeModule module_name kiara_modules.network_analysis.netwo\u2026 full_name kiara_modules.network_analysis.netwo\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process(self, inputs: ValueSet, outputs: Value\u2026 value_id: str = inputs.get_value_data(\"value_i\u2026 if not value_id: raise KiaraProcessingException(\"No value i\u2026 value_obj: Value = inputs.get_value_obj(\"value\u2026 base_path: str = inputs.get_value_data(\"base_p\u2026 load_config = self.save_value(value=value_obj,\u2026 load_config[\"value_id\"] = value_id lc = LoadConfig(**load_config) if lc.base_path_input_name and lc.base_path_in\u2026 raise KiaraProcessingException( f\"Invalid load config: base path '{lc.\u2026 ) outputs.set_values(load_config=lc) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.save"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. network_graph.analyze \u00b6 Documentation First iteration of a network analysis pipeline. This doesn't do much yet. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphAnalyzePipelineModule module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"network_graph.find_shortest_path\", \"module_config\": { \"mode\": \"single-pair\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"find_shortest_path\", \"input_links\": {} }, { \"module_type\": \"network_graph.properties\", \"module_config\": { \"density\": false }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"extract_properties\", \"input_links\": {} } ], \"input_aliases\": { \"find_shortest_path__graph\": \"graph\", \"extract_properties__graph\": \"graph\", \"find_shortest_path__source_node\": \"shortest_path_sou\u2026 \"find_shortest_path__target_node\": \"shortest_path_tar\u2026 }, \"output_aliases\": { \"find_shortest_path__path\": \"shortest_path\", \"extract_properties__largest_component\": \"largest_com\u2026 \"extract_properties__density_largest_component\": \"den\u2026 \"extract_properties__number_of_nodes\": \"number_of_nod\u2026 \"extract_properties__number_of_edges\": \"number_of_edg\u2026 }, \"documentation\": \"First iteration of a network analysis\u2026 \"context\": {}, \"module_type_name\": \"analyze\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.import.from_local_files \u00b6 Documentation Create a network graph from a a csv file that contains edges. You can specify an additional csv file if you have node attributes. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphImportFromLocalFilesPipelineMod\u2026 module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"file.import_from.path.string\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"read_edges_file\", \"input_links\": {} }, { \"module_type\": \"file.import_from.path.string\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"read_nodes_file\", \"input_links\": {} }, { \"module_type\": \"file.convert_to.table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_edges_table\", \"input_links\": { \"value_item\": [ { \"step_id\": \"read_edges_file\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"file.convert_to.table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_nodes_table\", \"input_links\": { \"value_item\": [ { \"step_id\": \"read_nodes_file\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.from_edges_table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_graph\", \"input_links\": { \"edges_table\": [ { \"step_id\": \"load_edges_table\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.augment\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"augment_graph\", \"input_links\": { \"graph\": [ { \"step_id\": \"create_graph\", \"value_name\": \"graph\", \"sub_value\": null } ], \"node_attributes\": [ { \"step_id\": \"load_nodes_table\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"value.save\", \"module_config\": { \"value_type\": \"network_graph\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"save_graph\", \"input_links\": { \"value_item\": [ { \"step_id\": \"augment_graph\", \"value_name\": \"graph\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"read_edges_file__source\": \"edges_path\", \"read_edges_file__aliases\": \"edges_file_aliases\", \"read_nodes_file__source\": \"nodes_path\", \"read_nodes_file__aliases\": \"nodes_file_aliases\", \"create_graph__source_column\": \"source_column\", \"create_graph__target_column\": \"target_column\", \"create_graph__weight_column\": \"weight_column\", \"create_graph__graph_type\": \"graph_type\", \"augment_graph__nodes_attributes\": \"nodes_attributes\", \"augment_graph__index_column_name\": \"nodes_table_inde\u2026 \"save_graph__aliases\": \"aliases\" }, \"output_aliases\": { \"save_graph__value_id\": \"value_id\", \"augment_graph__graph\": \"graph\" }, \"documentation\": \"Create a network graph from a a csv f\u2026 \"context\": {}, \"module_type_name\": \"from_local_files\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 network_graph.load \u00b6 Documentation Load a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphLoadPipelineModule module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_edges_table\", \"input_links\": {} }, { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_nodes_table\", \"input_links\": {} }, { \"module_type\": \"network_graph.from_edges_table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_graph\", \"input_links\": { \"edges_table\": [ { \"step_id\": \"load_edges_table\", \"value_name\": \"table\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.augment\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"augment_graph\", \"input_links\": { \"graph\": [ { \"step_id\": \"create_graph\", \"value_name\": \"graph\", \"sub_value\": null } ], \"node_attributes\": [ { \"step_id\": \"load_nodes_table\", \"value_name\": \"table\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"load_edges_table__base_path\": \"base_path\", \"load_edges_table__rel_path\": \"edges_path\", \"load_edges_table__format\": \"edges_file_format\", \"load_nodes_table__base_path\": \"base_path\", \"load_nodes_table__rel_path\": \"nodes_path\", \"load_nodes_table__format\": \"nodes_file_format\", \"create_graph__source_column\": \"source_column\", \"create_graph__target_column\": \"target_column\", \"create_graph__weight_column\": \"weight_column\", \"create_graph__graph_type\": \"graph_type\", \"augment_graph__nodes_attributes\": \"nodes_attributes\", \"augment_graph__index_column_name\": \"nodes_table_inde\u2026 }, \"output_aliases\": { \"augment_graph__graph\": \"graph\" }, \"documentation\": \"Load a network graph object.\", \"context\": {}, \"module_type_name\": \"load\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"pipelines_list/#network_graphanalyze","text":"Documentation First iteration of a network analysis pipeline. This doesn't do much yet. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphAnalyzePipelineModule module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"network_graph.find_shortest_path\", \"module_config\": { \"mode\": \"single-pair\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"find_shortest_path\", \"input_links\": {} }, { \"module_type\": \"network_graph.properties\", \"module_config\": { \"density\": false }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"extract_properties\", \"input_links\": {} } ], \"input_aliases\": { \"find_shortest_path__graph\": \"graph\", \"extract_properties__graph\": \"graph\", \"find_shortest_path__source_node\": \"shortest_path_sou\u2026 \"find_shortest_path__target_node\": \"shortest_path_tar\u2026 }, \"output_aliases\": { \"find_shortest_path__path\": \"shortest_path\", \"extract_properties__largest_component\": \"largest_com\u2026 \"extract_properties__density_largest_component\": \"den\u2026 \"extract_properties__number_of_nodes\": \"number_of_nod\u2026 \"extract_properties__number_of_edges\": \"number_of_edg\u2026 }, \"documentation\": \"First iteration of a network analysis\u2026 \"context\": {}, \"module_type_name\": \"analyze\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.analyze"},{"location":"pipelines_list/#network_graphimportfrom_local_files","text":"Documentation Create a network graph from a a csv file that contains edges. You can specify an additional csv file if you have node attributes. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphImportFromLocalFilesPipelineMod\u2026 module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"file.import_from.path.string\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"read_edges_file\", \"input_links\": {} }, { \"module_type\": \"file.import_from.path.string\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"read_nodes_file\", \"input_links\": {} }, { \"module_type\": \"file.convert_to.table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_edges_table\", \"input_links\": { \"value_item\": [ { \"step_id\": \"read_edges_file\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"file.convert_to.table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_nodes_table\", \"input_links\": { \"value_item\": [ { \"step_id\": \"read_nodes_file\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.from_edges_table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_graph\", \"input_links\": { \"edges_table\": [ { \"step_id\": \"load_edges_table\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.augment\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"augment_graph\", \"input_links\": { \"graph\": [ { \"step_id\": \"create_graph\", \"value_name\": \"graph\", \"sub_value\": null } ], \"node_attributes\": [ { \"step_id\": \"load_nodes_table\", \"value_name\": \"value_item\", \"sub_value\": null } ] } }, { \"module_type\": \"value.save\", \"module_config\": { \"value_type\": \"network_graph\" }, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"save_graph\", \"input_links\": { \"value_item\": [ { \"step_id\": \"augment_graph\", \"value_name\": \"graph\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"read_edges_file__source\": \"edges_path\", \"read_edges_file__aliases\": \"edges_file_aliases\", \"read_nodes_file__source\": \"nodes_path\", \"read_nodes_file__aliases\": \"nodes_file_aliases\", \"create_graph__source_column\": \"source_column\", \"create_graph__target_column\": \"target_column\", \"create_graph__weight_column\": \"weight_column\", \"create_graph__graph_type\": \"graph_type\", \"augment_graph__nodes_attributes\": \"nodes_attributes\", \"augment_graph__index_column_name\": \"nodes_table_inde\u2026 \"save_graph__aliases\": \"aliases\" }, \"output_aliases\": { \"save_graph__value_id\": \"value_id\", \"augment_graph__graph\": \"graph\" }, \"documentation\": \"Create a network graph from a a csv f\u2026 \"context\": {}, \"module_type_name\": \"from_local_files\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.import.from_local_files"},{"location":"pipelines_list/#network_graphload","text":"Documentation Load a network graph object. Origin Authors Lena Jaskov (helena.jaskov@uni.lu) Context Tags network_analysis, pipeline Labels package: kiara_modules.network_analysis pipeline: yes References source_repo: https://github.com/DHARPA-Project/kiara_modu\u2026 documentation: https://dharpa.org/kiara_modules.network_ana\u2026 module_doc: https://dharpa.org/kiara_modules.network_ana\u2026 Module config Field Type Description Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. steps array A list of no steps/modules of this pipeline, and their connections. input_aliases -- check A map of no source -- input aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow input alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. output_aliases -- check A map of no source -- output aliases, with the calculated (<step_id>__\u2026 -- double underscore!) name as key, and a string (the resulting workflow output alias) as value. Check the documentation for the config class for which marker strings can be used to automatically create this map if possible. documentation string Documentation no about what the pipeline does. context object Metadata for no this workflow. Module config -- no config -- Python class class_name NetworkGraphLoadPipelineModule module_name kiara_modules.network_analysis full_name kiara_modules.network_analysis.NetworkGraph\u2026 Pipeline config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 { \"constants\": {}, \"defaults\": {}, \"steps\": [ { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_edges_table\", \"input_links\": {} }, { \"module_type\": \"table.load\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"load_nodes_table\", \"input_links\": {} }, { \"module_type\": \"network_graph.from_edges_table\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"create_graph\", \"input_links\": { \"edges_table\": [ { \"step_id\": \"load_edges_table\", \"value_name\": \"table\", \"sub_value\": null } ] } }, { \"module_type\": \"network_graph.augment\", \"module_config\": {}, \"doc\": { \"description\": \"-- n/a --\", \"doc\": null }, \"step_id\": \"augment_graph\", \"input_links\": { \"graph\": [ { \"step_id\": \"create_graph\", \"value_name\": \"graph\", \"sub_value\": null } ], \"node_attributes\": [ { \"step_id\": \"load_nodes_table\", \"value_name\": \"table\", \"sub_value\": null } ] } } ], \"input_aliases\": { \"load_edges_table__base_path\": \"base_path\", \"load_edges_table__rel_path\": \"edges_path\", \"load_edges_table__format\": \"edges_file_format\", \"load_nodes_table__base_path\": \"base_path\", \"load_nodes_table__rel_path\": \"nodes_path\", \"load_nodes_table__format\": \"nodes_file_format\", \"create_graph__source_column\": \"source_column\", \"create_graph__target_column\": \"target_column\", \"create_graph__weight_column\": \"weight_column\", \"create_graph__graph_type\": \"graph_type\", \"augment_graph__nodes_attributes\": \"nodes_attributes\", \"augment_graph__index_column_name\": \"nodes_table_inde\u2026 }, \"output_aliases\": { \"augment_graph__graph\": \"graph\" }, \"documentation\": \"Load a network graph object.\", \"context\": {}, \"module_type_name\": \"load\" } \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_graph.load"},{"location":"usage/","text":"Usage \u00b6 This package contains modules, types and metadata schemas for network analysis in kiara .","title":"Usage"},{"location":"usage/#usage","text":"This package contains modules, types and metadata schemas for network analysis in kiara .","title":"Usage"},{"location":"api_reference/kiara_modules.network_analysis/","text":"kiara_modules.network_analysis \u00b6 Top-level package for kiara_modules.network_analysis.","title":"kiara_modules.network_analysis"},{"location":"api_reference/kiara_modules.network_analysis/#kiara_modulesnetwork_analysis","text":"Top-level package for kiara_modules.network_analysis.","title":"kiara_modules.network_analysis"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/","text":"kiara_modules.network_analysis.metadata_schemas \u00b6 This module contains the metadata models that are used in the kiara_modules.network_analysis package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel . GraphMetadata pydantic-model \u00b6 density : float pydantic-field required \u00b6 The density of the graph. directed : bool pydantic-field required \u00b6 Whether the graph is directed or not. number_of_edges : int pydantic-field required \u00b6 The number of edges in this graph. number_of_nodes : int pydantic-field required \u00b6 The number of nodes in this graph.","title":"\u279c\u2007metadata_schemas"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modulesnetwork_analysismetadata_schemas","text":"This module contains the metadata models that are used in the kiara_modules.network_analysis package. Metadata models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata that is attached to data, as well as kiara modules. It is possible to register metadata using a JSON schema string, but it is recommended to create a metadata model, because it is much easier overall. Metadata models must be a sub-class of kiara.metadata.MetadataModel .","title":"kiara_modules.network_analysis.metadata_schemas"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modules.network_analysis.metadata_schemas.GraphMetadata","text":"","title":"GraphMetadata"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modules.network_analysis.metadata_schemas.GraphMetadata.density","text":"The density of the graph.","title":"density"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modules.network_analysis.metadata_schemas.GraphMetadata.directed","text":"Whether the graph is directed or not.","title":"directed"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modules.network_analysis.metadata_schemas.GraphMetadata.number_of_edges","text":"The number of edges in this graph.","title":"number_of_edges"},{"location":"api_reference/kiara_modules.network_analysis.metadata_schemas/#kiara_modules.network_analysis.metadata_schemas.GraphMetadata.number_of_nodes","text":"The number of nodes in this graph.","title":"number_of_nodes"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/","text":"kiara_modules.network_analysis.network_graph \u00b6 AddCentralityCalculationsModule \u00b6 Add centrality properties to a graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"graph\" : ValueSchema ( type = \"network_graph\" ), \"degree_property_name\" : ValueSchema ( type = \"string\" , default = \"degree\" ), \"indegree_property_name\" : ValueSchema ( type = \"string\" , default = \"indegree\" ), \"outdegree_property_name\" : ValueSchema ( type = \"string\" , default = \"outdegree\" ), \"isolated_property_name\" : ValueSchema ( type = \"string\" , default = \"isolated\" ), \"betweenness_property_name\" : ValueSchema ( type = \"string\" , default = \"betweenness\" ), \"eigenvector_property_name\" : ValueSchema ( type = \"string\" , default = \"eigenvector\" ), } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"graph\" : ValueSchema ( type = \"network_graph\" ), } AddNodesToNetworkGraphModule \u00b6 Add nodes to an existing graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }} AugmentNetworkGraphModule \u00b6 Augment an existing graph with node attributes. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }} CreateGraphConfig pydantic-model \u00b6 graph_type : str pydantic-field \u00b6 The type of the graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'. CreateGraphFromEdgesTableModule \u00b6 Create a directed network graph object from table data. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"edges_table\" : { \"type\" : \"table\" , \"doc\" : \"The table to extract the edges from.\" , }, \"source_column\" : { \"type\" : \"string\" , \"default\" : \"source\" , \"doc\" : \"The name of the edge source column.\" , }, \"target_column\" : { \"type\" : \"string\" , \"default\" : \"target\" , \"doc\" : \"The name of the edge target column.\" , }, \"weight_column\" : { \"type\" : \"string\" , \"default\" : \"weight\" , \"doc\" : \"The name of the weight column.\" , }, } if self . get_config_value ( \"graph_type\" ) is None : inputs [ \"graph_type\" ] = { \"type\" : \"string\" , \"default\" : \"directed\" , \"doc\" : \"The type of the graph.\" , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The (networkx) graph object.\" }, } CreateGraphFromFileModule \u00b6 Create a graph object from a file. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains the graph data.\" , \"optional\" : False , }, \"input_type\" : { \"type\" : \"string\" , \"doc\" : f \"The input file type, supported: { ', ' . join ( SUPPORTED_INPUT_FILE_TYPES ) } \" , \"default\" : \"auto\" , }, } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" } } return outputs ExtractGraphPropertiesModule \u00b6 Extract inherent properties of a network graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result : typing . Dict [ str , typing . Any ] = {} if self . get_config_value ( \"number_of_nodes\" ): result [ \"number_of_nodes\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of nodes in the graph.\" , } if self . get_config_value ( \"number_of_edges\" ): result [ \"number_of_edges\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of edges in the graph.\" , } if self . get_config_value ( \"density\" ): result [ \"density\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the graph.\" } if self . get_config_value ( \"degrees\" ): result [ \"average_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average degree of the graph if it is not directed.\" , } result [ \"average_in_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average in degree of the graph if it is directed.\" , } result [ \"average_out_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average out degree of the graph if it is directed.\" , } if self . get_config_value ( \"shortest_path\" ): result [ \"average_shortest_path_length\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average shortest path length (only computed when graph is weekly connected).\" , } return result ExtractGraphPropertiesModuleConfig pydantic-model \u00b6 degrees : bool pydantic-field \u00b6 Calculate the graph degrees metrics. density : bool pydantic-field \u00b6 Calculate the graph density. number_of_edges : bool pydantic-field \u00b6 Count the number of edges number_of_nodes : bool pydantic-field \u00b6 Count the number of nodes. shortest_path : bool pydantic-field \u00b6 Calculate the graph shortest path. FindLargestComponentsModuleConfig pydantic-model \u00b6 find_largest_component : bool pydantic-field \u00b6 Find the largest component of a graph. number_of_components : bool pydantic-field \u00b6 Count the number of components. FindShortestPathModule \u00b6 Find the shortest path between two nodes in a network graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the source node.\" }, \"target_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the target node.\" }, } else : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The ids of the source nodes.\" }, \"target_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The ids of the target nodes.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"path\" : { \"type\" : \"array\" , \"doc\" : \"The shortest path between two nodes.\" } } else : return { \"paths\" : { \"type\" : \"table\" , \"doc\" : \"A table with 'source', 'target' and 'path' column.\" , } } FindShortestPathModuleConfig pydantic-model \u00b6 mode : str pydantic-field \u00b6 Whether to calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many'). GraphMetadataModule \u00b6 Extract metadata from a network graph object. GraphTypesEnum \u00b6 An enumeration. GrpahComponentsModule \u00b6 Extract component information from a graph. In particular, this module can calculate the number of components of a graph, and extract the largest sub-component from it. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"The largest connected component of the graph, as a new graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result SaveGraphDataTypeModule \u00b6 Save a network graph object. save_value ( self , value , base_path ) \u00b6 Save the value, and return the load config needed to load it again. Source code in network_analysis/network_graph.py def save_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import pyarrow as pa from pyarrow import feather graph : nx . Graph = value . get_value_data () if isinstance ( graph , nx . MultiDiGraph ): graph_type = GraphTypesEnum . multi_directed elif isinstance ( graph , nx . MultiGraph ): graph_type = GraphTypesEnum . multi_undirected elif isinstance ( graph , nx . DiGraph ): graph_type = GraphTypesEnum . directed elif isinstance ( graph , nx . Graph ): graph_type = GraphTypesEnum . undirected input_values = { \"base_path\" : base_path , \"edges_file_format\" : \"feather\" , \"nodes_file_format\" : \"feather\" , \"source_column\" : DEFAULT_SAVE_GRAPH_SOURCE_COLUMN_NAME , \"target_column\" : DEFAULT_SAVE_GRAPH_TARGET_COLUMN_NAME , \"weight_column\" : DEFAULT_SAVE_GRAPH_WEIGHT_COLUMN_NAME , \"nodes_table_index\" : DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME , \"graph_type\" : graph_type , } os . makedirs ( base_path , exist_ok = True ) edges_file_name = f \" { DEFAULT_SAVE_GRAPH_EDGES_TABLE_NAME } .feather\" edges_path = os . path . join ( base_path , edges_file_name ) df = nx . to_pandas_edgelist ( graph , \"source\" , \"target\" ) edges_table = pa . Table . from_pandas ( df , preserve_index = False ) # edge_attr_keys = set([k for n in graph.edges for k in graph.edges[n].keys()]) # edge_attr_keys.add(weight_column_name) feather . write_feather ( edges_table , edges_path ) input_values [ \"edges_path\" ] = edges_file_name nodes_file_name = f \" { DEFAULT_SAVE_GRAPH_NODES_TABLE_NAME } .feather\" nodes_path = os . path . join ( base_path , nodes_file_name ) node_attr_keys = set ([ k for n in graph . nodes for k in graph . nodes [ n ] . keys ()]) if DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME in node_attr_keys : node_attr_keys . remove ( DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME ) nodes_dict : typing . Dict [ str , typing . List [ typing . Any ]] = { DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME : [] } for k in node_attr_keys : nodes_dict [ k ] = [] for node in graph . nodes : nodes_dict [ DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME ] . append ( node ) for k in node_attr_keys : attr = graph . nodes [ node ] . get ( k , None ) nodes_dict [ k ] . append ( attr ) nodes_table = pa . Table . from_pydict ( nodes_dict ) feather . write_feather ( nodes_table , nodes_path ) input_values [ \"nodes_path\" ] = nodes_file_name load_config = { \"base_path_input_name\" : \"base_path\" , \"module_type\" : \"network_graph.load\" , \"inputs\" : input_values , \"output_name\" : \"graph\" , } return load_config","title":"\u279c\u2007network_graph"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modulesnetwork_analysisnetwork_graph","text":"","title":"kiara_modules.network_analysis.network_graph"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddCentralityCalculationsModule","text":"Add centrality properties to a graph.","title":"AddCentralityCalculationsModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddCentralityCalculationsModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"graph\" : ValueSchema ( type = \"network_graph\" ), \"degree_property_name\" : ValueSchema ( type = \"string\" , default = \"degree\" ), \"indegree_property_name\" : ValueSchema ( type = \"string\" , default = \"indegree\" ), \"outdegree_property_name\" : ValueSchema ( type = \"string\" , default = \"outdegree\" ), \"isolated_property_name\" : ValueSchema ( type = \"string\" , default = \"isolated\" ), \"betweenness_property_name\" : ValueSchema ( type = \"string\" , default = \"betweenness\" ), \"eigenvector_property_name\" : ValueSchema ( type = \"string\" , default = \"eigenvector\" ), }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddCentralityCalculationsModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"graph\" : ValueSchema ( type = \"network_graph\" ), }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddNodesToNetworkGraphModule","text":"Add nodes to an existing graph.","title":"AddNodesToNetworkGraphModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddNodesToNetworkGraphModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AddNodesToNetworkGraphModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AugmentNetworkGraphModule","text":"Augment an existing graph with node attributes.","title":"AugmentNetworkGraphModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AugmentNetworkGraphModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.AugmentNetworkGraphModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphConfig","text":"","title":"CreateGraphConfig"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphConfig.graph_type","text":"The type of the graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'.","title":"graph_type"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromEdgesTableModule","text":"Create a directed network graph object from table data.","title":"CreateGraphFromEdgesTableModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromEdgesTableModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"edges_table\" : { \"type\" : \"table\" , \"doc\" : \"The table to extract the edges from.\" , }, \"source_column\" : { \"type\" : \"string\" , \"default\" : \"source\" , \"doc\" : \"The name of the edge source column.\" , }, \"target_column\" : { \"type\" : \"string\" , \"default\" : \"target\" , \"doc\" : \"The name of the edge target column.\" , }, \"weight_column\" : { \"type\" : \"string\" , \"default\" : \"weight\" , \"doc\" : \"The name of the weight column.\" , }, } if self . get_config_value ( \"graph_type\" ) is None : inputs [ \"graph_type\" ] = { \"type\" : \"string\" , \"default\" : \"directed\" , \"doc\" : \"The type of the graph.\" , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromEdgesTableModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The (networkx) graph object.\" }, }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromFileModule","text":"Create a graph object from a file.","title":"CreateGraphFromFileModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs : typing . Mapping [ str , typing . Any ] = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains the graph data.\" , \"optional\" : False , }, \"input_type\" : { \"type\" : \"string\" , \"doc\" : f \"The input file type, supported: { ', ' . join ( SUPPORTED_INPUT_FILE_TYPES ) } \" , \"default\" : \"auto\" , }, } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.CreateGraphFromFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: outputs : typing . Mapping [ str , typing . Any ] = { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" } } return outputs","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModule","text":"Extract inherent properties of a network graph.","title":"ExtractGraphPropertiesModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result : typing . Dict [ str , typing . Any ] = {} if self . get_config_value ( \"number_of_nodes\" ): result [ \"number_of_nodes\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of nodes in the graph.\" , } if self . get_config_value ( \"number_of_edges\" ): result [ \"number_of_edges\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of edges in the graph.\" , } if self . get_config_value ( \"density\" ): result [ \"density\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the graph.\" } if self . get_config_value ( \"degrees\" ): result [ \"average_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average degree of the graph if it is not directed.\" , } result [ \"average_in_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average in degree of the graph if it is directed.\" , } result [ \"average_out_degree\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average out degree of the graph if it is directed.\" , } if self . get_config_value ( \"shortest_path\" ): result [ \"average_shortest_path_length\" ] = { \"type\" : \"float\" , \"optional\" : True , \"doc\" : \"Average shortest path length (only computed when graph is weekly connected).\" , } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig","text":"","title":"ExtractGraphPropertiesModuleConfig"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig.degrees","text":"Calculate the graph degrees metrics.","title":"degrees"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig.density","text":"Calculate the graph density.","title":"density"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig.number_of_edges","text":"Count the number of edges","title":"number_of_edges"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig.number_of_nodes","text":"Count the number of nodes.","title":"number_of_nodes"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.ExtractGraphPropertiesModuleConfig.shortest_path","text":"Calculate the graph shortest path.","title":"shortest_path"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindLargestComponentsModuleConfig","text":"","title":"FindLargestComponentsModuleConfig"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindLargestComponentsModuleConfig.find_largest_component","text":"Find the largest component of a graph.","title":"find_largest_component"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindLargestComponentsModuleConfig.number_of_components","text":"Count the number of components.","title":"number_of_components"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindShortestPathModule","text":"Find the shortest path between two nodes in a network graph.","title":"FindShortestPathModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindShortestPathModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the source node.\" }, \"target_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the target node.\" }, } else : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The ids of the source nodes.\" }, \"target_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The ids of the target nodes.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindShortestPathModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"path\" : { \"type\" : \"array\" , \"doc\" : \"The shortest path between two nodes.\" } } else : return { \"paths\" : { \"type\" : \"table\" , \"doc\" : \"A table with 'source', 'target' and 'path' column.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindShortestPathModuleConfig","text":"","title":"FindShortestPathModuleConfig"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.FindShortestPathModuleConfig.mode","text":"Whether to calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many').","title":"mode"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.GraphMetadataModule","text":"Extract metadata from a network graph object.","title":"GraphMetadataModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.GraphTypesEnum","text":"An enumeration.","title":"GraphTypesEnum"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.GrpahComponentsModule","text":"Extract component information from a graph. In particular, this module can calculate the number of components of a graph, and extract the largest sub-component from it.","title":"GrpahComponentsModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.GrpahComponentsModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[input_field_name]: { \"type\": \"[value_type]\", \"doc \": \"[a description of this input]\", \"optional ': [boolean whether this input is optional or required (defaults to 'False')] \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.GrpahComponentsModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. If returning a dictionary of dictionaries, the format of the return value is as follows (items with '*' are optional): { \"[output_field_name]: { \"type\": \"[value_type]\", \"doc*\": \"[a description of this output]\" \"[other_input_field_name]: { \"type: ... ... } Source code in network_analysis/network_graph.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"The largest connected component of the graph, as a new graph.\" , } if self . get_config_value ( \"number_of_components\" ): result [ \"number_of_components\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of components in the graph.\" , } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.SaveGraphDataTypeModule","text":"Save a network graph object.","title":"SaveGraphDataTypeModule"},{"location":"api_reference/kiara_modules.network_analysis.network_graph/#kiara_modules.network_analysis.network_graph.SaveGraphDataTypeModule.save_value","text":"Save the value, and return the load config needed to load it again. Source code in network_analysis/network_graph.py def save_value ( self , value : Value , base_path : str ) -> typing . Dict [ str , typing . Any ]: import pyarrow as pa from pyarrow import feather graph : nx . Graph = value . get_value_data () if isinstance ( graph , nx . MultiDiGraph ): graph_type = GraphTypesEnum . multi_directed elif isinstance ( graph , nx . MultiGraph ): graph_type = GraphTypesEnum . multi_undirected elif isinstance ( graph , nx . DiGraph ): graph_type = GraphTypesEnum . directed elif isinstance ( graph , nx . Graph ): graph_type = GraphTypesEnum . undirected input_values = { \"base_path\" : base_path , \"edges_file_format\" : \"feather\" , \"nodes_file_format\" : \"feather\" , \"source_column\" : DEFAULT_SAVE_GRAPH_SOURCE_COLUMN_NAME , \"target_column\" : DEFAULT_SAVE_GRAPH_TARGET_COLUMN_NAME , \"weight_column\" : DEFAULT_SAVE_GRAPH_WEIGHT_COLUMN_NAME , \"nodes_table_index\" : DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME , \"graph_type\" : graph_type , } os . makedirs ( base_path , exist_ok = True ) edges_file_name = f \" { DEFAULT_SAVE_GRAPH_EDGES_TABLE_NAME } .feather\" edges_path = os . path . join ( base_path , edges_file_name ) df = nx . to_pandas_edgelist ( graph , \"source\" , \"target\" ) edges_table = pa . Table . from_pandas ( df , preserve_index = False ) # edge_attr_keys = set([k for n in graph.edges for k in graph.edges[n].keys()]) # edge_attr_keys.add(weight_column_name) feather . write_feather ( edges_table , edges_path ) input_values [ \"edges_path\" ] = edges_file_name nodes_file_name = f \" { DEFAULT_SAVE_GRAPH_NODES_TABLE_NAME } .feather\" nodes_path = os . path . join ( base_path , nodes_file_name ) node_attr_keys = set ([ k for n in graph . nodes for k in graph . nodes [ n ] . keys ()]) if DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME in node_attr_keys : node_attr_keys . remove ( DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME ) nodes_dict : typing . Dict [ str , typing . List [ typing . Any ]] = { DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME : [] } for k in node_attr_keys : nodes_dict [ k ] = [] for node in graph . nodes : nodes_dict [ DEFAULT_SAVE_GRAPH_NODES_TABLE_INDEX_COLUMN_NAME ] . append ( node ) for k in node_attr_keys : attr = graph . nodes [ node ] . get ( k , None ) nodes_dict [ k ] . append ( attr ) nodes_table = pa . Table . from_pydict ( nodes_dict ) feather . write_feather ( nodes_table , nodes_path ) input_values [ \"nodes_path\" ] = nodes_file_name load_config = { \"base_path_input_name\" : \"base_path\" , \"module_type\" : \"network_graph.load\" , \"inputs\" : input_values , \"output_name\" : \"graph\" , } return load_config","title":"save_value()"},{"location":"api_reference/kiara_modules.network_analysis.pipelines/","text":"kiara_modules.network_analysis.pipelines \u00b6 Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"\u279c\u2007pipelines"},{"location":"api_reference/kiara_modules.network_analysis.pipelines/#kiara_modulesnetwork_analysispipelines","text":"Virtual module that is used as base for PipelineModule classes that are auto-generated from pipeline descriptions under this folder.","title":"kiara_modules.network_analysis.pipelines"},{"location":"api_reference/kiara_modules.network_analysis.value_types/","text":"kiara_modules.network_analysis.value_types \u00b6 This module contains the value type classes that are used in the kiara_modules.network_analysis package. NetworkGraphType \u00b6 A network graph object. Internally, this is backed by a Graph object of the networkx Python library. check_data ( data ) classmethod \u00b6 Check whether the provided input matches this value type. If it does, return a ValueType object (with the appropriate type configuration). Source code in network_analysis/value_types.py @classmethod def check_data ( cls , data : typing . Any ) -> typing . Optional [ \"ValueType\" ]: if isinstance ( data , nx . Graph ): return NetworkGraphType () else : return None","title":"\u279c\u2007value_types"},{"location":"api_reference/kiara_modules.network_analysis.value_types/#kiara_modulesnetwork_analysisvalue_types","text":"This module contains the value type classes that are used in the kiara_modules.network_analysis package.","title":"kiara_modules.network_analysis.value_types"},{"location":"api_reference/kiara_modules.network_analysis.value_types/#kiara_modules.network_analysis.value_types.NetworkGraphType","text":"A network graph object. Internally, this is backed by a Graph object of the networkx Python library.","title":"NetworkGraphType"},{"location":"api_reference/kiara_modules.network_analysis.value_types/#kiara_modules.network_analysis.value_types.NetworkGraphType.check_data","text":"Check whether the provided input matches this value type. If it does, return a ValueType object (with the appropriate type configuration). Source code in network_analysis/value_types.py @classmethod def check_data ( cls , data : typing . Any ) -> typing . Optional [ \"ValueType\" ]: if isinstance ( data , nx . Graph ): return NetworkGraphType () else : return None","title":"check_data()"}]}