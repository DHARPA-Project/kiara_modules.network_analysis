{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara plugin: network_analysis \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 kiara modules and datatypes for network analysis. Package content \u00b6 module_types \u00b6 network_analysis.example : A very simple example module; concatenate two strings. operations \u00b6 network_analysis.example : A very simple example module; concatenate two strings. Links \u00b6 Documentation: https://DHARPA-Project.github.io/kiara_plugin.network_analysis Code: https://github.com/DHARPA-Project/kiara_plugin.network_analysis","title":"Home"},{"location":"#kiara-plugin-network_analysis","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara plugin: network_analysis"},{"location":"#description","text":"kiara modules and datatypes for network analysis.","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#module_types","text":"network_analysis.example : A very simple example module; concatenate two strings.","title":"module_types"},{"location":"#operations","text":"network_analysis.example : A very simple example module; concatenate two strings.","title":"operations"},{"location":"#links","text":"Documentation: https://DHARPA-Project.github.io/kiara_plugin.network_analysis Code: https://github.com/DHARPA-Project/kiara_plugin.network_analysis","title":"Links"},{"location":"SUMMARY/","text":"Home Usage Package contents API reference","title":"SUMMARY"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"info/SUMMARY/","text":"module_types operations","title":"SUMMARY"},{"location":"info/module_types/","text":"network_analysis.example \u00b6 Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleCo\u2026 and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.Kiar\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 This example module can be tested on the \u2502 \u2502 commandline with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run core_types.example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Author(s) Markus Binsteiner markus@frkl.io Context Tags network_analysis Labels package : kiara_plugin.network_analysis References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. separator string The no \" - \" seperator between the two strings. Python class python_class_name ExampleModule python_module_name kiara_plugin.network_analysis\u2026 full_name kiara_plugin.network_analysis\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 separator = self . get_config_value( \"separator\" ) text_1 = inputs . get_value_data( \"text_1\" ) text_2 = inputs . get_value_data( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value( \"text\" , result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"module_types"},{"location":"info/module_types/#kiara_info.module_types.network_analysis.example","text":"Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleCo\u2026 and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.Kiar\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 This example module can be tested on the \u2502 \u2502 commandline with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run core_types.example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Author(s) Markus Binsteiner markus@frkl.io Context Tags network_analysis Labels package : kiara_plugin.network_analysis References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. separator string The no \" - \" seperator between the two strings. Python class python_class_name ExampleModule python_module_name kiara_plugin.network_analysis\u2026 full_name kiara_plugin.network_analysis\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 separator = self . get_config_value( \"separator\" ) text_1 = inputs . get_value_data( \"text_1\" ) text_2 = inputs . get_value_data( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value( \"text\" , result) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"network_analysis.example"},{"location":"info/operations/","text":"network_analysis.example \u00b6 Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModu\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 This example module can be tested on the commandline \u2502 \u2502 with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run core_types.example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Author(s) Markus Binsteiner markus@frkl.io Context Tags network_analysis Labels package : kiara_plugin.network_analysis References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Inputs field type desc\u2026 Req\u2026 Defa\u2026 name \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text\u2026 stri\u2026 The yes -- no first defa\u2026 text. -- text\u2026 stri\u2026 The yes -- no seco\u2026 defa\u2026 text. -- Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text string The concatenated text.","title":"operations"},{"location":"info/operations/#kiara_info.operations.network_analysis.example","text":"Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModu\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 This example module can be tested on the commandline \u2502 \u2502 with the ``kiara run`` command: \u2502 \u2502 \u2502 \u2502 ``` \u2502 \u2502 kiara run core_types.example text_1=\"xxx\" \u2502 \u2502 text_2=\"yyy\" \u2502 \u2502 ``` \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Author(s) Markus Binsteiner markus@frkl.io Context Tags network_analysis Labels package : kiara_plugin.network_analysis References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Inputs field type desc\u2026 Req\u2026 Defa\u2026 name \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text\u2026 stri\u2026 The yes -- no first defa\u2026 text. -- text\u2026 stri\u2026 The yes -- no seco\u2026 defa\u2026 text. -- Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text string The concatenated text.","title":"network_analysis.example"},{"location":"reference/SUMMARY/","text":"kiara_plugin network_analysis data_types models network_analysis pipelines","title":"SUMMARY"},{"location":"reference/kiara_plugin/network_analysis/__init__/","text":"Top-level package for kiara_plugin.network_analysis. KIARA_METADATA \u00b6 find_data_types : Union [ Type , Tuple , Callable ] \u00b6 find_modules : Union [ Type , Tuple , Callable ] \u00b6 find_pipelines : Union [ Type , Tuple , Callable ] \u00b6 find_value_metadata : Union [ Type , Tuple , Callable ] \u00b6 get_version () \u00b6 Source code in network_analysis/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__ Modules \u00b6 data_types \u00b6 This module contains the value type classes that are used in the kiara_plugin.network_analysis package. models \u00b6 This module contains the metadata (and other) models that are used in the kiara_plugin.network_analysis package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes. network_analysis \u00b6 Classes \u00b6 ExampleModule ( KiaraModule ) \u00b6 A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in network_analysis/network_analysis.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"network_analysis.example\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in network_analysis/network_analysis.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in network_analysis/network_analysis.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in network_analysis/network_analysis.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. pipelines special \u00b6 Default (empty) module that is used as a base path for pipelines contained in this package.","title":"network_analysis"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.KIARA_METADATA","text":"","title":"KIARA_METADATA"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.find_data_types","text":"","title":"find_data_types"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.find_modules","text":"","title":"find_modules"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.find_pipelines","text":"","title":"find_pipelines"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.find_value_metadata","text":"","title":"find_value_metadata"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.get_version","text":"Source code in network_analysis/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__","title":"get_version()"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis-modules","text":"","title":"Modules"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.data_types","text":"This module contains the value type classes that are used in the kiara_plugin.network_analysis package.","title":"data_types"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.models","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.network_analysis package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis","text":"","title":"network_analysis"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in network_analysis/network_analysis.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"network_analysis.example\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"ExampleModule"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis.ExampleModule-classes","text":"_config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Classes"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis.ExampleModule-methods","text":"create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in network_analysis/network_analysis.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in network_analysis/network_analysis.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in network_analysis/network_analysis.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"Methods"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis.ExampleModuleConfig","text":"Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"ExampleModuleConfig"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.network_analysis.ExampleModuleConfig-attributes","text":"separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Attributes"},{"location":"reference/kiara_plugin/network_analysis/__init__/#kiara_plugin.network_analysis.pipelines","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"},{"location":"reference/kiara_plugin/network_analysis/data_types/","text":"This module contains the value type classes that are used in the kiara_plugin.network_analysis package.","title":"data_types"},{"location":"reference/kiara_plugin/network_analysis/models/","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.network_analysis package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/","text":"Classes \u00b6 ExampleModule ( KiaraModule ) \u00b6 A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in network_analysis/network_analysis.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"network_analysis.example\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in network_analysis/network_analysis.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in network_analysis/network_analysis.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in network_analysis/network_analysis.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"network_analysis"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in network_analysis/network_analysis.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"network_analysis.example\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"ExampleModule"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule._config_cls","text":"Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"_config_cls"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule._config_cls-attributes","text":"separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Attributes"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in network_analysis/network_analysis.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in network_analysis/network_analysis.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModule.process","text":"Source code in network_analysis/network_analysis.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"process()"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModuleConfig","text":"Source code in network_analysis/network_analysis.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"ExampleModuleConfig"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModuleConfig-attributes","text":"","title":"Attributes"},{"location":"reference/kiara_plugin/network_analysis/network_analysis/#kiara_plugin.network_analysis.network_analysis.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"},{"location":"reference/kiara_plugin/network_analysis/pipelines/__init__/","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"}]}